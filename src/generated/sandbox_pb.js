// source: sandbox.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var orders_pb = require('./orders_pb.js');
goog.object.extend(proto, orders_pb);
var operations_pb = require('./operations_pb.js');
goog.object.extend(proto, operations_pb);
var users_pb = require('./users_pb.js');
goog.object.extend(proto, users_pb);
goog.exportSymbol('proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest', null, global);
goog.exportSymbol('proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse', null, global);
goog.exportSymbol('proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest', null, global);
goog.exportSymbol('proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse', null, global);
goog.exportSymbol('proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest', null, global);
goog.exportSymbol('proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.displayName = 'proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.displayName = 'proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.displayName = 'proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.displayName = 'proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.displayName = 'proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.displayName = 'proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest;
  return proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse;
  return proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse} returns this
 */
proto.tinkoff.public.invest.api.contract.v1.OpenSandboxAccountResponse.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest;
  return proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest} returns this
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse;
  return proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.CloseSandboxAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: (f = msg.getAmount()) && common_pb.MoneyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest;
  return proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = new common_pb.MoneyValue;
      reader.readMessage(value,common_pb.MoneyValue.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.MoneyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest} returns this
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MoneyValue amount = 2;
 * @return {?proto.tinkoff.public.invest.api.contract.v1.MoneyValue}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.getAmount = function() {
  return /** @type{?proto.tinkoff.public.invest.api.contract.v1.MoneyValue} */ (
    jspb.Message.getWrapperField(this, common_pb.MoneyValue, 2));
};


/**
 * @param {?proto.tinkoff.public.invest.api.contract.v1.MoneyValue|undefined} value
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest} returns this
*/
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest} returns this
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: (f = msg.getBalance()) && common_pb.MoneyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse;
  return proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.MoneyValue;
      reader.readMessage(value,common_pb.MoneyValue.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.MoneyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional MoneyValue balance = 1;
 * @return {?proto.tinkoff.public.invest.api.contract.v1.MoneyValue}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.prototype.getBalance = function() {
  return /** @type{?proto.tinkoff.public.invest.api.contract.v1.MoneyValue} */ (
    jspb.Message.getWrapperField(this, common_pb.MoneyValue, 1));
};


/**
 * @param {?proto.tinkoff.public.invest.api.contract.v1.MoneyValue|undefined} value
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse} returns this
*/
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.prototype.setBalance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse} returns this
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.prototype.clearBalance = function() {
  return this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tinkoff.public.invest.api.contract.v1.SandboxPayInResponse.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.tinkoff.public.invest.api.contract.v1);
